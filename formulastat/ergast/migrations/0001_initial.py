# Generated by Django 3.2.6 on 2021-08-07 12:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Circuits",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="circuitId", primary_key=True, serialize=False, verbose_name="Primary Key"
                    ),
                ),
                (
                    "circuit_ref",
                    models.CharField(
                        db_column="circuitRef", max_length=255, unique=True, verbose_name="Unique circuit identifier"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Circuit name")),
                ("location", models.CharField(blank=True, max_length=255, verbose_name="Location name")),
                ("country", models.CharField(blank=True, max_length=255, verbose_name="Country")),
                ("lat", models.FloatField(blank=True, null=True, verbose_name="Latitude")),
                ("lng", models.FloatField(blank=True, null=True, verbose_name="Longitude")),
                ("alt", models.FloatField(blank=True, null=True, verbose_name="Altitude (metres)")),
                (
                    "url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True, verbose_name="Circuit Wikipedia page"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Constructors",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="constructorId", primary_key=True, serialize=False, verbose_name="Primary Key"
                    ),
                ),
                (
                    "constructor_ref",
                    models.CharField(max_length=255, unique=True, verbose_name="Unique constructor identifier"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Constructor name")),
                (
                    "nationality",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Constructor nationality"),
                ),
                (
                    "url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True, verbose_name="Constructor Wikipedia page"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Drivers",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="driverId", primary_key=True, serialize=False, verbose_name="Primary Key"
                    ),
                ),
                (
                    "driver_ref",
                    models.CharField(db_column="driverRef", max_length=255, verbose_name="Unique driver identifier"),
                ),
                ("number", models.IntegerField(blank=True, null=True, verbose_name="Permanent driver number")),
                ("code", models.CharField(max_length=3, verbose_name='Driver code e.g. "ALO"')),
                ("forename", models.CharField(blank=True, max_length=255, verbose_name="Driver forename")),
                ("surname", models.CharField(blank=True, max_length=255, verbose_name="Driver surname")),
                ("dob", models.DateField(blank=True, null=True, verbose_name="Driver date of birth")),
                ("nationality", models.CharField(blank=True, max_length=255, verbose_name="Driver nationality")),
                (
                    "url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True, verbose_name="Constructor Wikipedia page"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LapTimes",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("lap", models.IntegerField(verbose_name="Lap number")),
                ("position", models.IntegerField(blank=True, null=True, verbose_name="Driver race position")),
                (
                    "time",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name='Lap time e.g. "1:43.762"'),
                ),
                ("milliseconds", models.IntegerField(blank=True, null=True, verbose_name="Lap time in milliseconds")),
                (
                    "driver_id",
                    models.ForeignKey(
                        db_column="driverId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.drivers",
                        verbose_name="Foreign key link to drivers table",
                    ),
                ),
            ],
            options={
                "db_table": "lap_times",
            },
        ),
        migrations.CreateModel(
            name="PitStops",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
        ),
        migrations.CreateModel(
            name="Qualifying",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
        ),
        migrations.CreateModel(
            name="Results",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
        ),
        migrations.CreateModel(
            name="Seasons",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("year", models.IntegerField(verbose_name="Primary key e.g. 1950")),
                (
                    "url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True, verbose_name="Season Wikipedia page"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
        ),
        migrations.CreateModel(
            name="Races",
            fields=[
                (
                    "id",
                    models.AutoField(db_column="raceId", primary_key=True, serialize=False, verbose_name="Primary Key"),
                ),
                ("round", models.IntegerField(verbose_name="Round number")),
                ("name", models.CharField(max_length=255, verbose_name="Race name")),
                ("date", models.DateField(verbose_name='Race date e.g. "1950-05-13"')),
                ("time", models.TimeField(blank=True, null=True, verbose_name='Race start time e.g."13:00:00"')),
                (
                    "url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True, verbose_name="Race Wikipedia page"
                    ),
                ),
                (
                    "circuit_id",
                    models.ForeignKey(
                        db_column="circuitId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.circuits",
                        verbose_name="Foreign key link to circuits table",
                    ),
                ),
                ("lap_times", models.ManyToManyField(through="ergast.LapTimes", to="ergast.Drivers")),
                (
                    "year",
                    models.ForeignKey(
                        db_column="year",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.seasons",
                        verbose_name="Foreign key link to seasons table",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="laptimes",
            name="race_id",
            field=models.ForeignKey(
                db_column="raceId",
                on_delete=django.db.models.deletion.CASCADE,
                to="ergast.races",
                verbose_name="Foreign key link to races table",
            ),
        ),
        migrations.CreateModel(
            name="DriverStandings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="driverStandingsId", primary_key=True, serialize=False, verbose_name="Primary Key"
                    ),
                ),
                ("points", models.FloatField(verbose_name="Driver points for season")),
                (
                    "position",
                    models.IntegerField(blank=True, null=True, verbose_name="Driver standings position (integer)"),
                ),
                (
                    "position_text",
                    models.CharField(
                        blank=True,
                        db_column="positionText",
                        max_length=255,
                        null=True,
                        verbose_name="Driver standings position (string)",
                    ),
                ),
                ("wins", models.IntegerField(verbose_name="Season win count")),
                (
                    "driver_id",
                    models.ForeignKey(
                        db_column="driverId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.drivers",
                        verbose_name="Foreign key link to drivers table",
                    ),
                ),
                (
                    "race_id",
                    models.ForeignKey(
                        db_column="raceId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.races",
                        verbose_name="Foreign key link to races table",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConstructorStandings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="constructorStandingsId",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Primary Key",
                    ),
                ),
                ("points", models.FloatField(blank=True, null=True, verbose_name="Constructor points for season")),
                (
                    "position",
                    models.IntegerField(blank=True, null=True, verbose_name="Constructor standings position (integer)"),
                ),
                (
                    "position_text",
                    models.CharField(
                        blank=True,
                        db_column="positionText",
                        max_length=255,
                        null=True,
                        verbose_name="Constructor standings position (string)",
                    ),
                ),
                ("wins", models.IntegerField(verbose_name="Season win count")),
                (
                    "constructor_id",
                    models.ForeignKey(
                        db_column="constructorId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.constructors",
                        verbose_name="Foreign key link to constructors table",
                    ),
                ),
                (
                    "race_id",
                    models.ForeignKey(
                        db_column="raceId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.races",
                        verbose_name="Foreign key link to races table",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConstructorResults",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="constructorResultsId", primary_key=True, serialize=False, verbose_name="Primary Key"
                    ),
                ),
                ("points", models.FloatField(blank=True, null=True, verbose_name="Constructor points for season")),
                (
                    "status",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name='"D" for disqualified (or null)'
                    ),
                ),
                (
                    "constructor_id",
                    models.ForeignKey(
                        db_column="constructorId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.constructors",
                        verbose_name="Foreign key link to constructors table",
                    ),
                ),
                (
                    "race_id",
                    models.ForeignKey(
                        db_column="raceId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ergast.races",
                        verbose_name="Foreign key link to races table",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="laptimes",
            constraint=models.UniqueConstraint(fields=("race_id", "driver_id", "lap"), name="unique_lap_time"),
        ),
    ]


// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project project_name {
  database_type: 'PostgreSQL'
}

Table driver {
  id integer [primary key]
  reference string [unique]
  forename string
  surname string
  abbreviation string
  nationality string
  permanent_car_number integer
  date_of_birth date
  wikipedia string
}

Table race_entry {
  id integer [primary key]
  driver_id integer
  race_id integer
  team_id integer
  Note: 'Driver data per race'
}

Table race {
  id integer [primary key]
  season_id integer
  circuit_id integer
  round integer
  name varchar
  date date
  wikipedia string
  cancelled bool
}

Table circuit {
  id integer [primary key]
  reference string
  name string
  location string
  country string
  latitude string
  longitude string
  altitude string
  wikipedia string
}

Table team {
  id integer [primary key]
  reference string
  name string
  nationality string
  wikipedia string
  base_team_id integer
}

Table base_team {
  id integer [primary key]
  first_entry integer
  Note: 'The official Team entry (consistent between rebrands)'
}
Ref: base_team.id < team.base_team_id


Table season {
  id integer [primary key]
  year integer
  wikipedia string
}

Table session {
  id integer [primary key]
  race_id integer
  date date
  time time
  session_category session_category
  point_system point_system
  laps integer
  Note: 'The sessions of a race e.g. race, quali'
}
enum session_category {
  race
  qualifying
  fp1
  fp2
  fp3
  sprint_race
  sprint_qualifying
}
enum point_system {
  none
  race_1950
  sprint_2022
  sprint_shootout_2023
}

Ref: race.id < session.race_id
Table driver_session {
  id integer [primary key]
  session_id integer
  race_entry_id integer
  car_number string
  // both
  position integer
  classified bool
  fastest_lap integer
  points decimal
  // race
  grid integer
  time duration
  laps integer
  status_id integer
  detail string
}
Ref: race_entry.id < driver_session.race_entry_id
Ref: session.id < driver_session.session_id
Ref: driver_session.fastest_lap - lap.id
Ref: status.id < driver_session.status_id
Table status {
  id integer [primary key]
  name string
}
Table penalty {
  id integer [primary key]
  earned integer
  served integer
  license_points integer
  position integer
  time duration
  time_served_in_pit bool
}
Ref: penalty.earned - driver_session.id
Ref: penalty.served - driver_session.id

Table lap {
  id integer [primary key]
  driver_session_id integer
  time duration
  average_speed decimal
}
Ref: driver_session.id < lap.driver_session_id

Table pit_stop {
  id integer [primary key]
  driver_session_id integer
  lap_number integer
  number integer
  duration duration
  local_timestamp string

}
Ref: driver_session.id < pit_stop.driver_session_id

Table driver_score {
  id integer [primary key]
  driver_id integer
  session_id integer
  points integer
  position integer
  final bool
  disqualified bool
}
Ref: driver.id - driver_score.driver_id
Ref: session.id - driver_score.session_id

Table team_score {
  id integer [primary key]
  team_id integer
  session_id integer
  points integer
  position integer
  final bool
  disqualified bool
}
Ref: team.id - team_score.team_id
Ref: session.id - team_score.session_id

Table team_driver {
  id integer [primary key]
  team_id integer
  driver_id integer
  season_id integer
  role team_driver_role
}
enum team_driver_role {
  permanent
  reserve
  junior // https://f1.fandom.com/wiki/List_of_drivers_who_participated_only_free_practice_during_Grand_Prix_weekend
}
Ref: team.id < team_driver.team_id
Ref: driver.id < team_driver.driver_id
Ref: season.id < team_driver.season_id

Ref: driver.id < race_entry.driver_id
Ref: race.id < race_entry.race_id
Ref: team.id < race_entry.team_id

Ref: season.id < race.season_id
Ref: circuit.id < race.circuit_id
//Ref: posts.user_id > users.id // many-to-one

//Ref: users.id < follows.following_user_id

//Ref: users.id < follows.followed_user_id
from django.urls import reverse
from django.utils import timezone
from rest_framework import serializers

from jolpica.formula_one.models import Circuit, Round, Season, Session, SessionType


class CircuitLocationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Circuit
        fields = ['latitude', 'longitude', 'altitude', 'locality', 'country', 'country_code']

class CircuitScheduleSerializer(serializers.ModelSerializer):
    location = CircuitLocationSerializer(source='*', read_only=True)

    class Meta:
        model = Circuit
        fields = ['name', 'reference', 'wikipedia', 'location']

class SessionSerializer(serializers.ModelSerializer):
    type_display = serializers.CharField(source='get_type_display', read_only=True)

    class Meta:
        model = Session
        fields = ['type', 'type_display', 'date', 'time']

# UPDATED: Round serializer - removed 'url' field
class RoundScheduleSerializer(serializers.ModelSerializer):
    sessions = SessionSerializer(source='sessions_for_serializer', many=True, read_only=True)
    circuit = CircuitScheduleSerializer(read_only=True)
    # url = serializers.HyperlinkedIdentityField(view_name='round-detail') # Removed

    class Meta:
        model = Round
        # Removed 'url' from fields
        fields = ['number', 'name', 'circuit', 'date', 'sessions']


class SeasonScheduleSerializer(serializers.ModelSerializer):
    season_year = serializers.IntegerField(source='year')
    rounds = RoundScheduleSerializer(source='rounds_for_serializer', many=True, read_only=True)
    # UPDATED: Replaced previous/next with round_info
    round_info = serializers.SerializerMethodField()
    season_url = serializers.HyperlinkedIdentityField(
        view_name='season-schedule-detail', # Use the name generated by router
        lookup_field='year'
    )

    class Meta:
        model = Season
        # UPDATED: Replaced previous_race/next_race with round_info
        fields = ['season_year', 'season_url', 'round_info', 'rounds']

    # NEW Method to combine previous/next round info from context
    def get_round_info(self, obj):
        # Fetches the dictionaries calculated in the viewset via context
        previous_round_info = self.context.get('previous_round_info')
        next_round_info = self.context.get('next_round_info')

        # Returns the combined structure
        return {
            "previous": previous_round_info, # Will be None if no previous race
            "next": next_round_info          # Will be None if no next race
        }